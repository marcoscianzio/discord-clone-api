### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthResponse {
  errors: [PathError]
  user: User
}

type DM {
  createdAt: DateTime!
  id: String!
  lastMessageDate: DateTime
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  recipients(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  type: DMType!
  visibility(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum DMType {
  GROUP
  ONE_TO_ONE
}

input DMWhereUniqueInput {
  id: String
}

scalar DateTime

type FriendRequest {
  id: Int!
  incoming: Boolean
  recipient: User!
  recipientId: String!
  requestedAt: DateTime!
  requester: User!
  requesterId: String!
  status: RequestStatus!
}

input FriendRequestWhereUniqueInput {
  id: Int
}

type Message {
  DM: DM
  content: String!
  createdAt: DateTime!
  dmId: String
  edited: Boolean!
  id: String!
  mentions(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  parentMessage: Message
  parentMessageId: String
  readBy(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  replies(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  senderId: String!
  updatedAt: DateTime!
}

input MessageWhereUniqueInput {
  id: String
}

type Mutation {
  createDM(recipientsIds: [String!]!): DM
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(values: loginInput!): AuthResponse!
  register(values: registerInput!): AuthResponse!
  rejectOrAcceptFriendRequest(friendRequestId: Int!, type: TypesOfFriendRequestMutation!): Boolean!
  sendFriendRequest(userId: String!): FriendRequest
  sendMessage(content: String!, dmId: String!): Message
  toggleDMVisibility(dmId: String!): DM
}

type PathError {
  message: String!
  path: String!
}

type Query {
  allFriends: [User]
  me: User
  myFriendRequests: [FriendRequest]
  myVisibleDMs: [DM]
  onlineFriends: [User]
  users: [User]!
}

enum RequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type Subscription {
  sendMessage(dmId: String!): Message
}

enum TypesOfFriendRequestMutation {
  ACCEPT
  REJECT
}

type User {
  DM(after: DMWhereUniqueInput, before: DMWhereUniqueInput, first: Int, last: Int): [DM!]!
  aboutMe: String
  asRecipientPending: Boolean
  asRequesterPending: Boolean
  avatar: String
  banner: String
  blocked(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  blockedRelation(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  color: String!
  createdAt: DateTime!
  discriminator: String!
  email: String!
  friends(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
  id: String!
  incomingFriendRequest(after: FriendRequestWhereUniqueInput, before: FriendRequestWhereUniqueInput, first: Int, last: Int): [FriendRequest!]!
  outgoingFriendRequest(after: FriendRequestWhereUniqueInput, before: FriendRequestWhereUniqueInput, first: Int, last: Int): [FriendRequest!]!
  status: UserStatus!
  telephone: String
  updatedAt: DateTime!
  username: String!
  verified: Boolean!
  visibleDM(after: DMWhereUniqueInput, before: DMWhereUniqueInput, first: Int, last: Int): [DM!]!
}

enum UserStatus {
  DO_NOT_DISTURB
  IDLE
  INVISIBLE
  ONLINE
}

input UserWhereUniqueInput {
  email: String
  id: String
}

input loginInput {
  emailOrPhone: String!
  password: String!
}

input registerInput {
  email: String!
  password: String!
  username: String!
}